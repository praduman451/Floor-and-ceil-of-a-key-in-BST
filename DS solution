#include<stdio.h>
#include<stdlib.h>

struct Node
{
  int data;
  struct Node *left, *right;
};

struct Node* newNode(int data)
{
  struct Node* node = (struct Node*)malloc(sizeof(struct Node));
  node->data = data;
  node->left = node->right = NULL;
  return (node);
}

struct Node* insertLevelOrder(int arr[], struct Node* root, int i, int n)
{
  if (i < n)
  {
    struct Node* temp = newNode(arr[i]);
    root = temp;

    root->left = insertLevelOrder(arr, root->left, 2 * i + 1, n);

    root->right = insertLevelOrder(arr, root->right, 2 * i + 2, n);
  }
  return root;
}

struct Node* buildTree(int t[], int n)
{
  struct Node* root = (struct Node*)malloc(sizeof(struct Node));
  root = insertLevelOrder(t, root, 0, n);
  return(root);
}
struct Node* extra(struct Node* root, int key)
{
if (root == NULL)
            return NULL;
       
  if (root->data == key)
            return root;
  
  if (root->data >  key)
            return extra(root->left, key);
  
  struct Node* right = extra(root->right, key);
       
  if (right == NULL)
            return root;
        else 
          return right;
}
int floorOf(struct Node* root, int key)
{
  if(root == NULL)
  {
    return -1;
  }
  struct Node* temp = extra(root,key);
  
  if(temp!=NULL)   
  return temp->data;
  
  else
    return -1;
}
 
int ceilOf(struct Node* root, int input)
{
 
    if (root == NULL)
        return -1;
 
    if (root->data == input)
        return root->data;
 
    if (root->data < input)
        return ceilOf(root->right, input);
 
    int ceil = ceilOf(root->left, input);
    return (ceil >= input) ? ceil : root->data;
}

int main()
{
  int a[50], n, i, k1;
  scanf("%d", &n);
  for(i=0;i<n;i++)
    scanf("%d", &a[i]);
  scanf("%d", &k1);
  struct Node* root = NULL;
  if(n>0)
    root = buildTree(a, n);
  printf("%d %d", floorOf(root, k1), ceilOf(root, k1));
  return 0;
}
